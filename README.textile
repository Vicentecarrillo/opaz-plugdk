h2. WHAT'S THERE ?

Experiments aiming at providing a way to implement VST plugins (v2.4, no support for v3) using JRuby and jVSTwRapper.

This code is totally experimental and highly subject to change.

h2. HOW TO USE

Use the available rake tasks to package plugins (see plugins folder).

  rake package plugin=HybridFilta

If the plugin folder contains at least one ruby file, the Opaz runtime will be embedded in the package, otherwise a pure Java plugin will be generated.

h2. STATUS OF AVAILABLE EXAMPLES

* JavaDelay (working)      => pure java delay brought back from jVStWrapper
* HybridGain (working)     => a simple gain
* HybridFilta (working)    => HP/LP cutoff+resonance filter
* RubyGain (working, slow) => simple pure ruby gain
* RubyDelay (not working)  => will be replaced by an HybridDelay

h2. MINI-ROADMAP

* (DONE) create a Rakefile able to package a Java plugin for Mac OS, Windows and Linux (equivalent to the existing Maven task in JVstWrapper)
* (DONE, see Rakefile and plugins/ddelay) ensure DDelay (jVSTwRapper sample) can be packaged this way
* (DONE, see plugins/jrubyproxy) experiment with JRuby to see how a VSTPluginAdapter instance can be created out of JRuby code, at runtime
* (DONE) create a way to declare and load a JRuby based plugin with jVSTwRapper
* (DONE) create a pure audio JRuby-based plugin
* (DONE) create syntactic sugar to make the plugin creation simple
* implement HybridDelay example
* create a pure midi JRuby-based plugin (ie: basic chords)
* use java_inline if possible
* finish "rake benchmark"
* ...

h2. NOTES

The libs and templates folders are generated using rake prepare:templates and rake prepare:libs.

Have a look at the rake file to see more about available tasks (compile, package, deploy).

h2. CREDITS

Thibaut Barr√®re and daniel309 (author of jVStWrapper).