h2. WHAT'S THERE ?

Experiments aiming at providing a way to implement VST plugins (v2.4, no support for v3) using JRuby and jVSTwRapper.

This code is totally experimental and highly subject to change.

h2. HOW TO USE

Use the available rake tasks to package plugins (see plugins folder).

  rake package plugin=HybridFilta

If the plugin folder contains at least one ruby file, the Opaz runtime will be embedded in the package, otherwise a pure Java plugin will be generated.

h2. STATUS OF AVAILABLE EXAMPLES

* JavaDelay (working)      => pure java delay brought back from jVSTwRapper
* HybridGain (working)     => a simple hybrid (mixing java and jruby) gain
* HybridFilta (working)    => HP/LP cutoff+resonance filter
* RubyGain (working, slow) => simple pure ruby gain
* RubyDelay (not working)  => will be replaced by an HybridDelay

h2. LIVE DEBUGGING

Thanks to Daniel, it's possible to enable live plugin patching through an IRB session.

Tweak tasks/tools.rb around line 88 to ensure the following line is not commented:

PluginUIClass=IRBPluginGUI

h2. MINI-ROADMAP

The current trend is to use JRuby for declarative stuff and glue, and Java for computing-intensive stuff.

* (DONE) create a Rakefile able to package a Java plugin for Mac OS, Windows and Linux (equivalent to the existing Maven task in jVSTwRapper)
* (DONE, see Rakefile and plugins/ddelay) ensure DDelay (jVSTwRapper sample) can be packaged this way
* (DONE, see plugins/jrubyproxy) experiment with JRuby to see how a VSTPluginAdapter instance can be created out of JRuby code, at runtime
* (DONE) create a way to declare and load a JRuby based plugin with jVSTwRapper
* (DONE) create a pure audio JRuby-based plugin
* (DONE) create syntactic sugar to make the plugin creation simple
* implement HybridDelay example
* fix buggy parameters names (display "Cut-off" instead of the ruby variable name)
* allow non-float parameters (like boolean)
* create a pure midi JRuby-based plugin (ie: basic chords)
* use java_inline if possible
* finish "rake benchmark"
* implement program handling in opaz_plug.rb
* ...

h2. NOTES

The libs and templates folders are generated using rake prepare:templates and rake prepare:libs.

Have a look at the rake file to see more about available tasks (compile, package, deploy).

h2. RESEARCH LINKS

* "JRuby runtime compilation from within JRuby and without boot.clj!":http://github.com/jtran/jruby-clojure/tree/master
* "Clojure / JRuby integration":http://blog.rubyenrails.nl/articles/2008/12/12/calling-clojure-from-jruby
* "Consume Clojure from JRuby":http://groups.google.com/group/clojure/browse_thread/thread/41e811c158d7881f/b31dc456fb5280ed?pli=1
* "More JRuby+Clojure":http://www.trampolinesystems.com/blog/machines/2009/01/22/jruby-clojure/
* "Clojure compilation + JRuby":http://www.iterasi.net/openviewer.aspx?sqrlitid=adqjm62xi0o69hradiit4a
* "Duby":http://www.infoq.com/news/2008/03/code-generation-jruby will be interesting once Java 6 is integrated to Mac OS X

h2. CREDITS

Thibaut Barr√®re and daniel309 (author of jVSTwRapper).