PLATFORMS = [:linux, :osx, :win]
JVSTWRAPPER_VERSION = '0.9g'

def bundle_url(platform)
  "http://freefr.dl.sourceforge.net/sourceforge/jvstwrapper/jVSTwRapper-Release-#{JVSTWRAPPER_VERSION}-#{platform}.zip"
end

def system!(cmd)
  raise "Failed to launch #{cmd}" unless system(cmd)
end

def templatized_file(source,target)
  File.open(target,"w") do |output|
    IO.readlines(source).each do |line|
      line = yield line
      output << line
    end
  end
end

def template(platform)
  "templates/#{platform}"
end

def download_and_unpack(platform, unzip_folder)
  url = bundle_url(platform)
  zip_file = unzip_folder + "/" + url.split('/').last
  system!("curl #{url} -o #{zip_file} --silent --show-error --location")
  system!("unzip -q #{zip_file} -d #{unzip_folder}")
end

namespace :prepare do
  
  task :templates do
    rm_rf "templates"
    PLATFORMS.each do |platform|
      unzip_folder = template(platform) + "/archive/unzipped"
      mkdir_p unzip_folder unless File.exist?(unzip_folder)
      download_and_unpack(platform, unzip_folder)
    
      root = "#{unzip_folder}/jVSTwRapper-Release-#{JVSTWRAPPER_VERSION}"
      if platform == :osx
        cp_r root+"-osx/jvstwrapper.vst", template(platform)
        File.rename(template(platform) + "/jvstwrapper.vst", template(platform) + '/wrapper.vst')
      else
        mkdir template(platform) + "/wrapper.vst"
        Dir[root+"/*.*"].grep(/(dll|so)$/).each { |f| cp f, template(platform) + "/wrapper.vst" }
      end
      rm_rf template(platform) + "/archive"
      Dir[template(platform) + "/**/*.*"].each do |f|
        rm f if f =~ /\.(bmp|ini|jar)$/
        mv f, File.dirname(f) + "/wrapper.#{$1}" if f =~ /\.(so|jnilib|dll)$/
      end
    end
  end

  task :libs do
    rm_rf "libs"
    mkdir_p "libs/temp"
    # the jars are shared accross all distributions, so pick one and extract them
    download_and_unpack(:win, "libs/temp")
    Dir["libs/temp/**/*-#{JVSTWRAPPER_VERSION}.jar"].select { |e| e.split('/').last =~ /jvst(system|wrapper)/i }.each { |f| cp f, "libs" }

    # todo - finish jruby download
    #system!("curl http://dist.codehaus.org/jruby/1.2.0/jruby-bin-1.2.0.zip -o libs/temp/jruby.zip --silent --show-error --location")
    #system!("unzip -q libs/temp/jruby.zip")
    #rm_rf "libs/temp"
  end

end

task :environment do
  @plugin_name = 'opaz_filta'
  @plugin_class = 'OpazFilta'
  @plugin_folder = "plugins/#{@plugin_name}"
  # todo - specify if the plugin uses jruby or not
  @jars = Dir["libs/*.jar"]
end

task :clean => :environment do
  Dir[@plugin_folder + "/*.class"].each { |f| rm f }
  rm_rf @plugin_folder + "/build"
end

task :compile => [:environment,:clean] do
  cmd = []
  cmd << 'javac'
  cmd << @plugin_folder + "/*.java"
  cmd << '-classpath'
  cmd << @jars.join(':')
  cmd = cmd.join(' ')

  system!(cmd)
=begin
  cmd = []
  cmd << 'jrubyc'
  cmd << @plugin_folder + "/*.rb"
  cmd = cmd.join(' ')
  
  system!(cmd)  
=end
end

task :package => :environment do
  rm_rf @plugin_folder + "/build"
  mkdir @plugin_folder + "/build"
  PLATFORMS.each do |platform|
    build_folder = @plugin_folder + "/build/#{platform}"
    resources_folder = build_folder + "/wrapper.vst" + (platform == :osx ? "/Contents/Resources" : "")
    
    # copy platform template
    cp_r template(platform), build_folder

    # create ini file
    ini_file = resources_folder + "/" + (platform == :osx ? "wrapper.jnilib.ini" : "wrapper.ini")
    File.open(ini_file,"w") do |output|
      content = [ "PluginClass=" + @plugin_class,
                  #"PluginUIClass=jvst/examples/jaydlay/JayDLayGUI"
                  "ClassPath=" + @jars.reject { |f| f =~ /jVSTsYstem/}.map { |e| "{WrapperPath}/"+ e.split('/').last }.join(':'),
                  "SystemClassPath={WrapperPath}/jVSTsYstem-0.9g.jar",
                  "IsLoggingEnabled=1"]
      content.each { |e| output << e + "\n"}
    end
    
    # add classes and jars
    (@jars + Dir[@plugin_folder + "/*.class"]).each { |f| cp f, resources_folder }

    # create Info.plist (osx only)
    if platform == :osx
      plist_file = build_folder + "/wrapper.vst/Contents/Info.plist"
      plist_content = IO.read(plist_file).gsub!(/<key>(\w*)<\/key>\s+<string>([^<]+)<\/string>/) do
        key,value = $1, $2
        value = @plugin_name+".jnilib" if key == 'CFBundleExecutable'
        value = @plugin_name if key == 'CFBundleName'
        "<key>#{key}</key>\n	<string>#{value}</string>"
      end
      File.open(plist_file,"w") { |output| output << plist_content }
    end

    # rename to match plugin name - two pass - first the directories, then the files
    (0..1).each do |pass|
      Dir[build_folder+"/**/wrapper*"].partition { |f| File.directory?(f) }[pass].each do |file|
        File.rename(file,file.gsub(/wrapper/,@plugin_name))
      end
    end
  end
end

task :deploy => [:environment] do#, :package] do
  #target_folder = "/Library/Audio/Plug-Ins/VST/"
  target_folder = File.expand_path("~/VST-Dev")
  Dir["plugins/*/build/osx/*"].each do |plugin|
    target_plugin = "#{target_folder}/#{plugin.split('/').last}"
    rm_rf(target_plugin) if File.exist?(target_plugin)
    cp_r plugin, target_plugin
  end

end
